package demo;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Date;


public class Test3 {

public static void main(String[] args) throws Exception{
//	String url = "https://114.55.39.36/PDF/c6bb90a73f471ad205707e2551beee7e.pdf";
	String url = "https://statictest.yuanbaopu.com/ui/bank/images/listofdata/shopLogo.png";
//	String url = "http://114.55.39.36:8086/PDF/c6bb90a73f471ad205707e2551beee7e.pdf";
	String path = "D:/";
	//下载文件到本地
	System.out.println("--------------下载开始"+new Date());
	downLoadImg(url,path,"AAA.pdf");
	System.out.println("--------------下载结束"+new Date());
	//删除临时文件
//	File file = new File(path+"jdk.zip");
//	file.delete();
}

/**
 * 下载网络地址
 * @param uri  网络下载地址
 * @param tmpPath 临时下载目录
 * @param tmpFileName  临时图片文件名称
 * @return
 * @throws Exception
 */
public static File downLoadImg(String uri,String tmpPath,String tmpFileName) throws Exception {
	// new一个URL对象
	URL url = new URL(uri);
	// 打开链接
	HttpURLConnection conn = (HttpURLConnection) url.openConnection();
	// 设置请求方式为"GET"
	conn.setRequestMethod("GET");
	// 超时响应时间为5秒
	conn.setConnectTimeout(5 * 1000);
	// 通过输入流获取图片数据
	InputStream inStream = conn.getInputStream();
	// 得到图片的二进制数据，以二进制封装得到数据，具有通用性
	byte[] data = readInputStream(inStream);
	// new一个文件对象用来保存图片，默认保存当前工程根目录
	File imageFile = new File(tmpPath+"/"+tmpFileName);
	// 创建输出流
	FileOutputStream outStream = new FileOutputStream(imageFile);
	// 写入数据
	outStream.write(data);
	// 关闭输出流
	outStream.close();
	return imageFile;
}
/**
 * 处理文件流
 * @param inStream
 * @return
 * @throws Exception
 */
private static byte[] readInputStream(InputStream inStream)
		throws Exception {
	ByteArrayOutputStream outStream = new ByteArrayOutputStream();
	// 创建一个Buffer字符串
	byte[] buffer = new byte[1024];
	// 每次读取的字符串长度，如果为-1，代表全部读取完毕
	int len = 0;
	// 使用一个输入流从buffer里把数据读取出来
	while ((len = inStream.read(buffer)) != -1) {
		// 用输出流往buffer里写入数据，中间参数代表从哪个位置开始读，len代表读取的长度
		outStream.write(buffer, 0, len);
	}
	// 关闭输入流
	inStream.close();
	// 把outStream里的数据写入内存
	return outStream.toByteArray();
}

}
